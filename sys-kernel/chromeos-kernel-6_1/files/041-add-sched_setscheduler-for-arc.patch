Index: kernel-6_1/kernel/sched/core.c
===================================================================
--- kernel-6_1.orig/kernel/sched/core.c
+++ kernel-6_1/kernel/sched/core.c
@@ -7536,6 +7536,57 @@ recheck:
 	    (rt_policy(policy) != (attr->sched_priority != 0)))
 		return -EINVAL;
 
+  /*
+   * Allow unprivileged RT tasks to decrease priority:
+   */
+  if (user && !capable(CAP_SYS_NICE)) {
+    if (fair_policy(policy)) {
+      if (attr->sched_nice < task_nice(p) &&
+          !can_nice(p, attr->sched_nice))
+        return -EPERM;
+    }
+
+    if (rt_policy(policy)) {
+      unsigned long rlim_rtprio =
+          task_rlimit(p, RLIMIT_RTPRIO);
+
+      /* Can't set/change the rt policy: */
+      if (policy != p->policy && !rlim_rtprio)
+        return -EPERM;
+
+      /* Can't increase priority: */
+      if (attr->sched_priority > p->rt_priority &&
+          attr->sched_priority > rlim_rtprio)
+        return -EPERM;
+    }
+
+     /*
+      * Can't set/change SCHED_DEADLINE policy at all for now
+      * (safest behavior); in the future we would like to allow
+      * unprivileged DL tasks to increase their relative deadline
+      * or reduce their runtime (both ways reducing utilization)
+      */
+    if (dl_policy(policy))
+      return -EPERM;
+
+    /*
+     * Treat SCHED_IDLE as nice 20. Only allow a switch to
+     * SCHED_NORMAL if the RLIMIT_NICE would normally permit it.
+     */
+    if (task_has_idle_policy(p) && !idle_policy(policy)) {
+      if (!can_nice(p, task_nice(p)))
+        return -EPERM;
+    }
+
+    /* Can't change other user's priorities: */
+    if (!check_same_owner(p))
+      return -EPERM;
+
+    /* Normal users shall not reset the sched_reset_on_fork flag: */
+    if (p->sched_reset_on_fork && !reset_on_fork)
+      return -EPERM;
+  }
+
 	if (user) {
 		retval = user_check_sched_setscheduler(p, attr, policy, reset_on_fork);
 		if (retval)

diff --git a/drivers/gpu/drm/vmwgfx/vmwgfx_drv.c b/drivers/gpu/drm/vmwgfx/vmwgfx_drv.c
index f7a2efef4ce7..39b25b54420f 100644
--- a/drivers/gpu/drm/vmwgfx/vmwgfx_drv.c
+++ b/drivers/gpu/drm/vmwgfx/vmwgfx_drv.c
@@ -521,6 +521,8 @@ static void vmw_get_initial_size(struct vmw_private *dev_priv)
 {
 	uint32_t width;
 	uint32_t height;
+    vmw_write(dev_priv, SVGA_REG_WIDTH, 1920);
+    vmw_write(dev_priv, SVGA_REG_HEIGHT, 1080);
 
 	width = vmw_read(dev_priv, SVGA_REG_WIDTH);
 	height = vmw_read(dev_priv, SVGA_REG_HEIGHT);
diff --git a/drivers/gpu/drm/vmwgfx/vmwgfx_kms.c b/drivers/gpu/drm/vmwgfx/vmwgfx_kms.c
index dca04d4246ea..0ecadc57032b 100644
--- a/drivers/gpu/drm/vmwgfx/vmwgfx_kms.c
+++ b/drivers/gpu/drm/vmwgfx/vmwgfx_kms.c
@@ -982,10 +982,10 @@ static int vmw_kms_new_framebuffer_surface(struct vmw_private *dev_priv,
 
 	switch (mode_cmd->pixel_format) {
 	case DRM_FORMAT_ARGB8888:
-		format = SVGA3D_A8R8G8B8;
+    format = SVGA3D_B8G8R8A8_UNORM;
 		break;
 	case DRM_FORMAT_XRGB8888:
-		format = SVGA3D_X8R8G8B8;
+    format = SVGA3D_B8G8R8X8_UNORM;
 		break;
 	case DRM_FORMAT_RGB565:
 		format = SVGA3D_R5G6B5;
@@ -993,6 +993,12 @@ static int vmw_kms_new_framebuffer_surface(struct vmw_private *dev_priv,
 	case DRM_FORMAT_XRGB1555:
 		format = SVGA3D_A1R5G5B5;
 		break;
+  case DRM_FORMAT_ABGR8888:
+    format = SVGA3D_R8G8B8A8_UNORM;
+    break;
+  case DRM_FORMAT_XBGR8888:
+    format = SVGA3D_B8G8R8X8_UNORM;
+    break;
 	default:
 		DRM_ERROR("Invalid pixel format: %s\n",
 			  drm_get_format_name(mode_cmd->pixel_format, &format_name));
@@ -1209,10 +1215,17 @@ static int vmw_create_bo_proxy(struct drm_device *dev,
 
 	switch (mode_cmd->pixel_format) {
 	case DRM_FORMAT_ARGB8888:
+    format = SVGA3D_B8G8R8A8_UNORM;
+    bytes_pp = 4;
+    break;
 	case DRM_FORMAT_XRGB8888:
-		format = SVGA3D_X8R8G8B8;
+		format = SVGA3D_B8G8R8X8_UNORM;
 		bytes_pp = 4;
 		break;
+  case DRM_FORMAT_ABGR8888:
+    format = SVGA3D_R8G8B8A8_UNORM;
+    bytes_pp = 4;
+    break;
 
 	case DRM_FORMAT_RGB565:
 	case DRM_FORMAT_XRGB1555:
diff --git a/drivers/gpu/drm/vmwgfx/vmwgfx_kms.h b/drivers/gpu/drm/vmwgfx/vmwgfx_kms.h
index 76ec570c0684..299d9b3d4ac6 100644
--- a/drivers/gpu/drm/vmwgfx/vmwgfx_kms.h
+++ b/drivers/gpu/drm/vmwgfx/vmwgfx_kms.h
@@ -135,6 +135,7 @@ static const uint32_t vmw_primary_plane_formats[] = {
 	DRM_FORMAT_RGB888,
 	DRM_FORMAT_XRGB8888,
 	DRM_FORMAT_ARGB8888,
+  DRM_FORMAT_ABGR8888,
 };
 
 static const uint32_t vmw_cursor_plane_formats[] = {
diff --git a/drivers/gpu/drm/vmwgfx/vmwgfx_surface.c b/drivers/gpu/drm/vmwgfx/vmwgfx_surface.c
index ef09f7edf931..2f4a8f444fb4 100644
--- a/drivers/gpu/drm/vmwgfx/vmwgfx_surface.c
+++ b/drivers/gpu/drm/vmwgfx/vmwgfx_surface.c
@@ -46,6 +46,7 @@
  * @size:           TTM accounting size for the surface.
  * @master: master of the creating client. Used for security check.
  */
+ 
 struct vmw_user_surface {
 	struct ttm_prime_object prime;
 	struct vmw_surface srf;
@@ -830,7 +831,10 @@ int vmw_surface_define_ioctl(struct drm_device *dev, void *data,
 	    srf->num_sizes == 1 &&
 	    srf->sizes[0].width == 64 &&
 	    srf->sizes[0].height == 64 &&
-	    srf->format == SVGA3D_A8R8G8B8) {
+	    (srf->format == SVGA3D_A8R8G8B8 || 
+         srf->format == SVGA3D_R8G8B8A8_UNORM ||
+         srf->format == SVGA3D_B8G8R8A8_UNORM ||
+         srf->format == SVGA3D_B8G8R8X8_UNORM)) {
 
 		srf->snooper.image = kzalloc(64 * 64 * 4, GFP_KERNEL);
 		if (!srf->snooper.image) {
@@ -1699,7 +1703,6 @@ vmw_gb_surface_define_internal(struct drm_device *dev,
 		rep->buffer_size = 0;
 		rep->buffer_handle = SVGA3D_INVALID_ID;
 	}
-
 	vmw_resource_unreference(&res);
 
 out_unlock:
